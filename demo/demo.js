(()=>{"use strict";var __webpack_modules__={166:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n// EXTERNAL MODULE: ./node_modules/@masatomakino/particle-waypoint/esm/index.js + 14 modules\nvar esm = __webpack_require__(525);\n;// CONCATENATED MODULE: ./esm/ParticleWayBuilder.js\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator["throw"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar OBJLineType;\n(function (OBJLineType) {\n  OBJLineType["COMMENT"] = "#";\n  OBJLineType["NAME"] = "o";\n  OBJLineType["VALUE"] = "v";\n})(OBJLineType || (OBJLineType = {}));\nclass ParticleWayBuilder {\n  /**\n   *  指定されたOBJファイルから、ParticleWayの配列を取り出す。\n   * @param objFilePath\n   * @param isClosed オプション クローズパスの場合にはtrueを指定する\n   */\n  static build(objFilePath, isClosed = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const lines = yield this.getText(objFilePath);\n      let pathName = "";\n      let currentPath;\n      const pathArray = [];\n      lines.forEach(line => {\n        const type = this.getType(line);\n        const value = this.getValue(line);\n        switch (type) {\n          case OBJLineType.NAME:\n            this.push(currentPath, pathName, pathArray, isClosed);\n            currentPath = [];\n            pathName = value[0];\n            break;\n          case OBJLineType.VALUE:\n            const points = value.map(val => {\n              return parseFloat(val);\n            });\n            currentPath.push(points);\n            break;\n        }\n      });\n      //まだ格納していない処理中のパスを格納。\n      this.push(currentPath, pathName, pathArray, isClosed);\n      return pathArray;\n    });\n  }\n  static push(currentPath, pathName, pathArray, isClosed) {\n    if (currentPath == null) return;\n    if (isClosed) {\n      currentPath.push([...currentPath[0]]);\n    }\n    const path = new ParticleWay(currentPath);\n    path.name = pathName;\n    pathArray.push(path);\n  }\n  static getText(objFilePath) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const response = yield fetch(objFilePath);\n      const txt = yield response.text();\n      const lines = txt.split(/\\r\\n|\\r|\\n/).filter(val => {\n        return val.length > 0;\n      });\n      return lines;\n    });\n  }\n  static getType(line) {\n    const values = line.split(/\\s+/);\n    return values[0];\n  }\n  static getValue(line) {\n    const values = line.split(/\\s+/);\n    return values.slice(1);\n  }\n}\n;// CONCATENATED MODULE: ./esm/ThreeParticle.js\n\n\nclass ThreeParticle extends esm/* Particle */.hp {\n  init(parent, texturePath, scale) {\n    if (ThreeParticle.loader == null) {\n      ThreeParticle.loader = new three_module/* TextureLoader */.dpR();\n    }\n    this.parent = parent;\n    const map = ThreeParticle.loader.load(texturePath, texture => {\n      if (this.sprite == null) return;\n      this.sprite.scale.set(texture.image.width * scale, texture.image.height * scale, 1.0);\n    });\n    const mat = new three_module/* SpriteMaterial */.xeV({\n      map: map,\n      depthTest: false\n    });\n    this.sprite = new three_module/* Sprite */.jyi(mat);\n    this.parent.add(this.sprite);\n  }\n  update(t) {\n    const n = super.update(t);\n    const pos = this.path.getPoint(n);\n    this.sprite.position.set(pos[0], pos[1], pos[2]);\n    return n;\n  }\n  dispose() {\n    super.dispose();\n    if (this.parent && this.sprite.parent) {\n      this.sprite.parent.remove(this.sprite);\n    }\n    this.parent = null;\n    this.sprite = null;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ThreeParticleGenerator.js\n\n\nclass ThreeParticleGenerator extends esm/* ParticleGenerator */.F8 {\n  constructor(parent, path, texturePath, scale, option) {\n    super(path, option);\n    this.textureCounter = 0;\n    this.parent = parent;\n    this.scale = scale;\n    if (Array.isArray(texturePath)) {\n      this.texturePath = texturePath;\n    } else {\n      this.texturePath = [texturePath];\n    }\n  }\n  generateParticle(path) {\n    const particle = new ThreeParticle(path);\n    particle.init(this.parent, this.texturePath[this.textureCounter], this.scale);\n    this.textureCounter = (this.textureCounter += 1) % this.texturePath.length;\n    return particle;\n  }\n  generateAll() {\n    this.textureCounter = 0;\n    super.generateAll();\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/demo.js\n\n\n\nconst W = 800;\nconst H = 600;\nlet renderer;\nlet scene;\nlet camera;\nconst onDomContentsLoaded = () => {\n  initScene();\n  initWaypoint();\n  render();\n};\nconst initScene = () => {\n  // シーンを作成\n  scene = new three_module/* Scene */.xsS();\n  camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, 1, 400);\n  camera.position.set(0, 0, 50);\n  scene.add(camera);\n  const renderOption = {\n    canvas: document.getElementById("webgl-canvas"),\n    antialias: true\n  };\n  renderer = new three_module/* WebGLRenderer */.CP7(renderOption);\n  renderer.setClearColor(new three_module/* Color */.Ilk(0x000000));\n  renderer.setSize(W, H);\n  renderer.setPixelRatio(window.devicePixelRatio);\n\n  //平行光源オブジェクト(light)の設定\n  const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n  scene.add(ambientLight);\n};\nconst initWaypoint = () => {\n  const path = new esm/* ParticleWay */.mG([[0.0, 0.0, 0.0], [0.0, 10.0, 0.0], [10.0, 10.0, 0.0], [10.0, 10.0, 10.0], [0.0, 10.0, 10.0], [10.0, 0.0, 10.0]]);\n  const generator = new ThreeParticleGenerator(scene, path, ["./map01.png", "./map02.png", "./map03.png", "./map04.png"], 0.005, {\n    generationMode: "loop"\n  });\n  generator.animator.setGenerationInterval(0.08, 4 * 8);\n  generator.play();\n};\nconst render = () => {\n  renderer.render(scene, camera);\n  requestAnimationFrame(render);\n};\n/**\n * DOMContentLoaded以降に初期化処理を実行する\n */\nwindow.onload = onDomContentsLoaded;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///166\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(l=0;l<deferred.length;l++){for(var[U,F,B]=deferred[l],s=!0,e=0;e<U.length;e++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[e])))?U.splice(e--,1):(s=!1,B<I&&(I=B));if(s){deferred.splice(l--,1);var C=F();void 0!==C&&(Q=C)}}return Q}B=B||0;for(var l=deferred.length;l>0&&deferred[l-1][2]>B;l--)deferred[l]=deferred[l-1];deferred[l]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={577:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[s,e,C]=F,l=0;if(s.some((U=>0!==Q[U]))){for(B in e)__webpack_require__.o(e,B)&&(__webpack_require__.m[B]=e[B]);if(C)var g=C(__webpack_require__)}for(U&&U(F);l<s.length;l++)I=s[l],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(g)},F=self.webpackChunk_masatomakino_threejs_particle_waypoint=self.webpackChunk_masatomakino_threejs_particle_waypoint||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(166)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();